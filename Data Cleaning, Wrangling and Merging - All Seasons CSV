{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1iJT2bzcvVvWl9YoVNQGCMMo2T51kqtjo","timestamp":1740172646315},{"file_id":"1DbQ9AxYtNNFdIxVt6bJgtQsAFcotIQAO","timestamp":1739851728873}],"collapsed_sections":["xr-lFuZhNEgb"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"toSDzi0ANEgZ"},"source":["# Dataset\n","\n","This dataset contains 12,844 records of NBA player statistics spanning multiple seasons. It includes demographic details such as age, height, weight, college, and country of origin, as well as draft information and seasonal performance metrics like points, rebounds, assists, and advanced analytics. The data was collected using the NBA Stats API and supplemented with missing values from Basketball Reference. It can be used to analyze player career trajectories, historical trends in playing styles, and the impact of international talent on the league.\n"]},{"cell_type":"code","source":["#import pandas\n","import pandas as pd"],"metadata":{"id":"sDCaJpD7QxXh","executionInfo":{"status":"ok","timestamp":1740622652090,"user_tz":300,"elapsed":1004,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# Import the All Seasons dataset (CSV file\n","# The file location\n","all_seasons_df = pd.read_csv('https://raw.githubusercontent.com/RyanHinshaw/csc442_group_project/refs/heads/main/all_seasons.csv')\n","\n","# Read in the file and print out the DataFrame\n","print(all_seasons_df.head())"],"metadata":{"id":"vjUArj-htksk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1740622652538,"user_tz":300,"elapsed":425,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"ce9a80f0-b56d-4aaa-dfff-c5971c3fa8de"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0    player_name team_abbreviation  age  player_height  \\\n","0       10227   James Harden               HOU   29         195.58   \n","1        4163    Kobe Bryant               LAL   27         198.12   \n","2       10634   James Harden               HOU   30         195.58   \n","3       12839    Joel Embiid               PHI   29         213.36   \n","4        4302  Allen Iverson               PHI   31         182.88   \n","\n","   player_weight        college   country draft_year draft_round  ...   pts  \\\n","0       99.79024  Arizona State       USA       2009           1  ...  36.1   \n","1       99.79024            NaN       USA       1996           1  ...  35.4   \n","2       99.79024  Arizona State       USA       2009           1  ...  34.3   \n","3      127.00576         Kansas  Cameroon       2014           1  ...  33.1   \n","4       74.84268     Georgetown       USA       1996           1  ...  33.0   \n","\n","    reb  ast  net_rating  oreb_pct  dreb_pct  usg_pct  ts_pct  ast_pct  \\\n","0   6.6  7.5         6.3     0.023     0.157    0.396   0.616    0.394   \n","1   5.3  4.5         4.7     0.026     0.127    0.384   0.559    0.228   \n","2   6.6  7.5         5.8     0.026     0.139    0.356   0.626    0.366   \n","3  10.2  4.2         8.8     0.057     0.243    0.370   0.655    0.233   \n","4   3.2  7.4         0.8     0.016     0.071    0.354   0.543    0.331   \n","\n","    season  \n","0  2018-19  \n","1  2005-06  \n","2  2019-20  \n","3  2022-23  \n","4  2005-06  \n","\n","[5 rows x 22 columns]\n"]}]},{"cell_type":"markdown","source":["# 1.Data Cleaning"],"metadata":{"id":"1MwsYTyH-Ow2"}},{"cell_type":"markdown","source":["## 1.1 Get to know data\n","\n"," ## Data Dictionary\n","\n","- **Unnamed: 0**: Index value assigned to each player record (appears to be an auto-generated index).\n","- **player_name**: Name of the player.\n","- **team_abbreviation**: Abbreviation of the team the player was on for that season.\n","- **age**: Player’s age during the recorded season.\n","- **player_height**: Height of the player (in cm).\n","- **player_weight**: Weight of the player (in kg).\n","- **college**: College the player attended, if applicable.\n","- **country**: Country of origin of the player.\n","- **draft_year**: Year in which the player was drafted into the NBA.\n","- **draft_round**: The round in which the player was selected in the draft.\n","- **draft_number**: Overall pick number of the player in the draft.\n","- **gp**: Number of games played during the season.\n","- **pts**: Average points scored per game.\n","- **reb**: Average rebounds per game.\n","- **ast**: Average assists per game.\n","- **net_rating**: Player’s net efficiency rating (offensive rating - defensive rating).\n","- **oreb_pct**: Offensive rebound percentage, indicating the proportion of available offensive rebounds secured by the player.\n","- **dreb_pct**: Defensive rebound percentage, showing the proportion of available defensive rebounds secured by the player.\n","- **usg_pct**: Usage percentage, representing the percentage of team plays used by the player while on the floor.\n","- **ts_pct**: True shooting percentage, measuring shooting efficiency by incorporating field goals, free throws, and three-pointers.\n","- **ast_pct**: Assist percentage, showing the proportion of teammate field goals assisted by the player.\n","- **season**: The NBA season in which the statistics were recorded (e.g., \"2018-19\").\n"],"metadata":{"id":"0CCRJfWxCU_o"}},{"cell_type":"code","source":["# find shape of the data\n","print(all_seasons_df.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pYUdUGQpb2X-","executionInfo":{"status":"ok","timestamp":1740622652573,"user_tz":300,"elapsed":32,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"11c8104e-39ff-4c83-9b87-89f108f029c0"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(12844, 22)\n"]}]},{"cell_type":"code","source":["# print columns labels\n","print(all_seasons_df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ezHhfWChb713","executionInfo":{"status":"ok","timestamp":1740622652609,"user_tz":300,"elapsed":34,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"a39d5504-0d35-4083-fe48-491824d3fe05"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Unnamed: 0', 'player_name', 'team_abbreviation', 'age',\n","       'player_height', 'player_weight', 'college', 'country', 'draft_year',\n","       'draft_round', 'draft_number', 'gp', 'pts', 'reb', 'ast', 'net_rating',\n","       'oreb_pct', 'dreb_pct', 'usg_pct', 'ts_pct', 'ast_pct', 'season'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["# check row labels\n","print(all_seasons_df.index)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-pGAQmLbcF3j","executionInfo":{"status":"ok","timestamp":1740622652620,"user_tz":300,"elapsed":9,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"5e5225a6-e356-47f7-963b-69af1596209c"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["RangeIndex(start=0, stop=12844, step=1)\n"]}]},{"cell_type":"code","source":["# find the column that is unique to each row (unit of observation)\n","# HINT: these will have number of unique values equal to the  number of rows in the dataframe\n","# could be names or IDs\n","len(all_seasons_df[\"player_name\"].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sXEE5jqpbnOO","executionInfo":{"status":"ok","timestamp":1740622652652,"user_tz":300,"elapsed":30,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"08e10384-e5d8-4940-bbd5-cdfb7ab091fb"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2551"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# check type of varaibles\n","all_seasons_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":774},"id":"ctHFiRUqcLb2","executionInfo":{"status":"ok","timestamp":1740622652703,"user_tz":300,"elapsed":50,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"512d60cc-fa96-4184-88b2-ac6f34aed26d"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Unnamed: 0             int64\n","player_name           object\n","team_abbreviation     object\n","age                    int64\n","player_height        float64\n","player_weight        float64\n","college               object\n","country               object\n","draft_year            object\n","draft_round           object\n","draft_number          object\n","gp                     int64\n","pts                  float64\n","reb                  float64\n","ast                  float64\n","net_rating           float64\n","oreb_pct             float64\n","dreb_pct             float64\n","usg_pct              float64\n","ts_pct               float64\n","ast_pct              float64\n","season                object\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Unnamed: 0</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>player_name</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>team_abbreviation</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>player_height</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>player_weight</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>college</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>draft_year</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>draft_round</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>draft_number</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>gp</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>pts</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>reb</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>ast</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>net_rating</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>oreb_pct</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>dreb_pct</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>usg_pct</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>ts_pct</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>ast_pct</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>season</th>\n","      <td>object</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["Strings are usually represented as objects, check few rows to learn more about objects. They could also be compound data types like lists and dictionaries within a column - that may need more cleaning.\n","\n","You can find the datatype of a column through `dtype`\n","\n","\n","\n","\n","\n","\n","\n"," attribute"],"metadata":{"id":"m3zZPEr0ctT1"}},{"cell_type":"code","source":["# similarly to know the datatype of a single column in the dataframe\n","# HINT: use dtype\n","all_seasons_df['player_name'].dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SRTAQoFjRAmp","executionInfo":{"status":"ok","timestamp":1740622652704,"user_tz":300,"elapsed":8,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"4486c10f-fbaf-401d-d96d-b94bb7366351"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('O')"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# display the head\n","all_seasons_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"55EllPoec86O","executionInfo":{"status":"ok","timestamp":1740622652778,"user_tz":300,"elapsed":76,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"9f4b309a-af34-451c-cb49-15aaa67d87f4"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0    player_name team_abbreviation  age  player_height  \\\n","0       10227   James Harden               HOU   29         195.58   \n","1        4163    Kobe Bryant               LAL   27         198.12   \n","2       10634   James Harden               HOU   30         195.58   \n","3       12839    Joel Embiid               PHI   29         213.36   \n","4        4302  Allen Iverson               PHI   31         182.88   \n","\n","   player_weight        college   country draft_year draft_round  ...   pts  \\\n","0       99.79024  Arizona State       USA       2009           1  ...  36.1   \n","1       99.79024            NaN       USA       1996           1  ...  35.4   \n","2       99.79024  Arizona State       USA       2009           1  ...  34.3   \n","3      127.00576         Kansas  Cameroon       2014           1  ...  33.1   \n","4       74.84268     Georgetown       USA       1996           1  ...  33.0   \n","\n","    reb  ast  net_rating  oreb_pct  dreb_pct  usg_pct  ts_pct  ast_pct  \\\n","0   6.6  7.5         6.3     0.023     0.157    0.396   0.616    0.394   \n","1   5.3  4.5         4.7     0.026     0.127    0.384   0.559    0.228   \n","2   6.6  7.5         5.8     0.026     0.139    0.356   0.626    0.366   \n","3  10.2  4.2         8.8     0.057     0.243    0.370   0.655    0.233   \n","4   3.2  7.4         0.8     0.016     0.071    0.354   0.543    0.331   \n","\n","    season  \n","0  2018-19  \n","1  2005-06  \n","2  2019-20  \n","3  2022-23  \n","4  2005-06  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-0da71047-9a05-4d32-9914-9d92c5f071a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>player_name</th>\n","      <th>team_abbreviation</th>\n","      <th>age</th>\n","      <th>player_height</th>\n","      <th>player_weight</th>\n","      <th>college</th>\n","      <th>country</th>\n","      <th>draft_year</th>\n","      <th>draft_round</th>\n","      <th>...</th>\n","      <th>pts</th>\n","      <th>reb</th>\n","      <th>ast</th>\n","      <th>net_rating</th>\n","      <th>oreb_pct</th>\n","      <th>dreb_pct</th>\n","      <th>usg_pct</th>\n","      <th>ts_pct</th>\n","      <th>ast_pct</th>\n","      <th>season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10227</td>\n","      <td>James Harden</td>\n","      <td>HOU</td>\n","      <td>29</td>\n","      <td>195.58</td>\n","      <td>99.79024</td>\n","      <td>Arizona State</td>\n","      <td>USA</td>\n","      <td>2009</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>36.1</td>\n","      <td>6.6</td>\n","      <td>7.5</td>\n","      <td>6.3</td>\n","      <td>0.023</td>\n","      <td>0.157</td>\n","      <td>0.396</td>\n","      <td>0.616</td>\n","      <td>0.394</td>\n","      <td>2018-19</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4163</td>\n","      <td>Kobe Bryant</td>\n","      <td>LAL</td>\n","      <td>27</td>\n","      <td>198.12</td>\n","      <td>99.79024</td>\n","      <td>NaN</td>\n","      <td>USA</td>\n","      <td>1996</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>35.4</td>\n","      <td>5.3</td>\n","      <td>4.5</td>\n","      <td>4.7</td>\n","      <td>0.026</td>\n","      <td>0.127</td>\n","      <td>0.384</td>\n","      <td>0.559</td>\n","      <td>0.228</td>\n","      <td>2005-06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10634</td>\n","      <td>James Harden</td>\n","      <td>HOU</td>\n","      <td>30</td>\n","      <td>195.58</td>\n","      <td>99.79024</td>\n","      <td>Arizona State</td>\n","      <td>USA</td>\n","      <td>2009</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>34.3</td>\n","      <td>6.6</td>\n","      <td>7.5</td>\n","      <td>5.8</td>\n","      <td>0.026</td>\n","      <td>0.139</td>\n","      <td>0.356</td>\n","      <td>0.626</td>\n","      <td>0.366</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12839</td>\n","      <td>Joel Embiid</td>\n","      <td>PHI</td>\n","      <td>29</td>\n","      <td>213.36</td>\n","      <td>127.00576</td>\n","      <td>Kansas</td>\n","      <td>Cameroon</td>\n","      <td>2014</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>33.1</td>\n","      <td>10.2</td>\n","      <td>4.2</td>\n","      <td>8.8</td>\n","      <td>0.057</td>\n","      <td>0.243</td>\n","      <td>0.370</td>\n","      <td>0.655</td>\n","      <td>0.233</td>\n","      <td>2022-23</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4302</td>\n","      <td>Allen Iverson</td>\n","      <td>PHI</td>\n","      <td>31</td>\n","      <td>182.88</td>\n","      <td>74.84268</td>\n","      <td>Georgetown</td>\n","      <td>USA</td>\n","      <td>1996</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>33.0</td>\n","      <td>3.2</td>\n","      <td>7.4</td>\n","      <td>0.8</td>\n","      <td>0.016</td>\n","      <td>0.071</td>\n","      <td>0.354</td>\n","      <td>0.543</td>\n","      <td>0.331</td>\n","      <td>2005-06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0da71047-9a05-4d32-9914-9d92c5f071a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0da71047-9a05-4d32-9914-9d92c5f071a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0da71047-9a05-4d32-9914-9d92c5f071a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-924969e8-ff8b-4486-896b-4ff1f6130dd0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-924969e8-ff8b-4486-896b-4ff1f6130dd0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-924969e8-ff8b-4486-896b-4ff1f6130dd0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_seasons_df"}},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["## 1.2 Identify which numerical columns and categorical columns"],"metadata":{"id":"W4DPyqPodFvD"}},{"cell_type":"markdown","source":["## Document!!!\n","\n","Usually a good idea to mark which columns you think and find to be categorical.\n","\n","- **Unnamed: 0**: Index value assigned to each player record (appears to be an auto-generated index).\n","- **player_name**: Name of the player.\n","- **team_abbreviation**: Abbreviation of the team the player was on for that season.\n","- **age**: Player’s age during the recorded season.\n","- **player_height**: Height of the player (in cm).\n","- **player_weight**: Weight of the player (in kg).\n","- **college**: College the player attended, if applicable.\n","- **country**: Country of origin of the player.\n","- **draft_year**: Year in which the player was drafted into the NBA.\n","- **draft_round**: The round in which the player was selected in the draft.\n","- **draft_number**: Overall pick number of the player in the draft.\n","- **gp**: Number of games played during the season.\n","- **pts**: Average points scored per game.\n","- **reb**: Average rebounds per game.\n","- **ast**: Average assists per game.\n","- **net_rating**: Player’s net efficiency rating (offensive rating - defensive rating).\n","- **oreb_pct**: Offensive rebound percentage, indicating the proportion of available offensive rebounds secured by the player.\n","- **dreb_pct**: Defensive rebound percentage, showing the proportion of available defensive rebounds secured by the player.\n","- **usg_pct**: Usage percentage, representing the percentage of team plays used by the player while on the floor.\n","- **ts_pct**: True shooting percentage, measuring shooting efficiency by incorporating field goals, free throws, and three-pointers.\n","- **ast_pct**: Assist percentage, showing the proportion of teammate field goals assisted by the player.\n","- **season**: The NBA season in which the statistics were recorded (e.g., \"2018-19\").\n"],"metadata":{"id":"lN2aC7YufcSi"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","# Initialize lists\n","numerical = []\n","categorical = []\n","string = []\n","\n","for column in all_seasons_df.columns:  # Ensure df is the correct DataFrame variable\n","    # Check if the column is of string type (object or category)\n","    if all_seasons_df[column].dtype == 'object' or pd.api.types.is_string_dtype(all_seasons_df[column]):\n","        if all_seasons_df[column].nunique() <= 10:\n","            categorical.append(column)  # Categorical columns (fewer unique values)\n","        else:\n","            string.append(column)  # String columns (many unique values)\n","    # Check if the column contains numerical values (integer or float)\n","    elif np.issubdtype(all_seasons_df[column].dtype, np.number):\n","        numerical.append(column)  # Numerical columns\n","\n","# Print the classified columns\n","print(\"Numerical columns:\", numerical)\n","print(\"Categorical columns:\", categorical)\n","print(\"String columns:\", string)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MM_Eug1fB918","executionInfo":{"status":"ok","timestamp":1740622652788,"user_tz":300,"elapsed":8,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"bb5f3151-88c8-40a1-a414-9b2e1b0ce02a"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Numerical columns: ['Unnamed: 0', 'age', 'player_height', 'player_weight', 'gp', 'pts', 'reb', 'ast', 'net_rating', 'oreb_pct', 'dreb_pct', 'usg_pct', 'ts_pct', 'ast_pct']\n","Categorical columns: ['draft_round']\n","String columns: ['player_name', 'team_abbreviation', 'college', 'country', 'draft_year', 'draft_number', 'season']\n"]}]},{"cell_type":"markdown","source":["### 1.2.1 Categorical columns coding\n","\n","Sometimes you need some categorical columns to be numbers, or encoded as numbers."],"metadata":{"id":"Uhsss9uTGEPZ"}},{"cell_type":"code","source":["# convert all the columns in the categorical list to be of the type category\n","\n","for column in categorical:\n","  all_seasons_df[column] = all_seasons_df[column].astype('category')\n","\n","print(all_seasons_df.dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fiiBNYdMGKTK","executionInfo":{"status":"ok","timestamp":1740622652834,"user_tz":300,"elapsed":16,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"de81cdbe-3c1d-4b27-c4ea-572c916c9008"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Unnamed: 0              int64\n","player_name            object\n","team_abbreviation      object\n","age                     int64\n","player_height         float64\n","player_weight         float64\n","college                object\n","country                object\n","draft_year             object\n","draft_round          category\n","draft_number           object\n","gp                      int64\n","pts                   float64\n","reb                   float64\n","ast                   float64\n","net_rating            float64\n","oreb_pct              float64\n","dreb_pct              float64\n","usg_pct               float64\n","ts_pct                float64\n","ast_pct               float64\n","season                 object\n","dtype: object\n"]}]},{"cell_type":"markdown","source":["Most of the commands shown until this point, you would have used in your homework assignment 4."],"metadata":{"id":"QZpGVET_tDxh"}},{"cell_type":"markdown","source":["### 1.2.2. Numerical column consistency\n","\n"],"metadata":{"id":"CB-sDGSaGuKi"}},{"cell_type":"code","source":["# We have multiple ID columns, check formats\n","# ConstitutentID should be an Integer but is currently represented as a Float with .0\n","#paintings['ConstituentID'] = paintings['ConstituentID'].astype(int)\n","\n","all_seasons_df['draft_year'] = pd.to_numeric(all_seasons_df['draft_year'], errors='coerce')  # Convert numeric, set others to NaN\n","\n","# Now convert to 'Int64' to handle NaNs, if any\n","all_seasons_df['draft_year'] = all_seasons_df['draft_year'].astype('Int64')\n","\n","print(all_seasons_df.dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I3X0xgfIGtm7","executionInfo":{"status":"ok","timestamp":1740622652843,"user_tz":300,"elapsed":8,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"16b3592f-29ed-4d24-b173-be7584a99918"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Unnamed: 0              int64\n","player_name            object\n","team_abbreviation      object\n","age                     int64\n","player_height         float64\n","player_weight         float64\n","college                object\n","country                object\n","draft_year              Int64\n","draft_round          category\n","draft_number           object\n","gp                      int64\n","pts                   float64\n","reb                   float64\n","ast                   float64\n","net_rating            float64\n","oreb_pct              float64\n","dreb_pct              float64\n","usg_pct               float64\n","ts_pct                float64\n","ast_pct               float64\n","season                 object\n","dtype: object\n"]}]},{"cell_type":"markdown","source":["What is the difference between int and Int?"],"metadata":{"id":"4Go8yekUSiY6"}},{"cell_type":"markdown","source":["### 1.2.3 Working with date and time columns"],"metadata":{"id":"6kp2AjT9H7mF"}},{"cell_type":"markdown","metadata":{"id":"c_SwKUMOBU4x"},"source":["Our MoMA dataset contains some columns of data that represent date values (for example, `DateAcquired`,  `Date`). Currently, each of these columns is recognized as strings (the pandas object datatype). If we look at the `DateAcquired` column we see that it contains the date that an artwork was acquired by the museum in the form `YYYY-MM-DD` (for example, `1964-10-06`) but also may include text with it. If we wanted to filter these values by year, we would not be able to do this in their current string format.\n","\n","We can convert the values in the `DateAcquired` column to a pandas Datetime data type to use them as a datetime format.\n","\n","The conversion for the `Date` varaible rather simpler using the pandas method `to_datetime()` on the column."]},{"cell_type":"code","source":["all_seasons_df[\"draft_year\"].head(20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":711},"id":"UPpUf5F5nPKC","executionInfo":{"status":"ok","timestamp":1740622652883,"user_tz":300,"elapsed":14,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"9a61963d-610f-485d-fbcc-11e6fa7c3e27"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     2009\n","1     1996\n","2     2009\n","3     2014\n","4     1996\n","5     2018\n","6     2012\n","7     1997\n","8     2007\n","9     2009\n","10    1996\n","11    2008\n","12    1996\n","13    2003\n","14    2018\n","15    2012\n","16    1996\n","17    2013\n","18    1996\n","19    2014\n","Name: draft_year, dtype: Int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>draft_year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2009</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1996</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2009</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1996</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2012</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1997</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2007</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2009</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1996</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2008</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1996</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>2012</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1996</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>2013</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1996</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>2014</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> Int64</label>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["\n","\n","# very messy - only keep year - how could you filter only year from this?\n","# think how strings can be accessed..\n","# traverse each string and capture last four characters that are numbers\n","\n","import numpy as np\n","def extract_last_4_digits(text):\n","    \"\"\"Extracts the last 4 digits from a string without regular expressions.\n","\n","    Args:\n","    text: The input string.\n","\n","    Returns:\n","    The last 4 digits of the string, or None if no digits are found.\n","    \"\"\"\n","    text = str(text)\n","    if text is not np.nan:\n","      digits = [char for char in reversed(text) if char.isdigit()]\n","      if len(digits) >= 4:\n","        return \"\".join(reversed(digits[:4]))\n","    return None\n","\n","\n","# identify digits in the string -\n","\n","# all_seasons_df['draft_year'] = all_seasons_df['draft_year'].apply(\n","#     extract_last_4_digits\n","# )\n","\n","# # verify\n","# print(all_seasons_df[\"draft_year\"].head(20))"],"metadata":{"id":"Lu31w_stLehk","executionInfo":{"status":"ok","timestamp":1740622652956,"user_tz":300,"elapsed":75,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# sanity check\n","all_seasons_df.info()\n","\n","all_seasons_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":863},"id":"GHHqpBDryLA5","executionInfo":{"status":"ok","timestamp":1740622653041,"user_tz":300,"elapsed":87,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"8db9f806-d90c-4656-dba0-2b1e82a6724d"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 12844 entries, 0 to 12843\n","Data columns (total 22 columns):\n"," #   Column             Non-Null Count  Dtype   \n","---  ------             --------------  -----   \n"," 0   Unnamed: 0         12844 non-null  int64   \n"," 1   player_name        12844 non-null  object  \n"," 2   team_abbreviation  12844 non-null  object  \n"," 3   age                12844 non-null  int64   \n"," 4   player_height      12844 non-null  float64 \n"," 5   player_weight      12844 non-null  float64 \n"," 6   college            10990 non-null  object  \n"," 7   country            12844 non-null  object  \n"," 8   draft_year         10486 non-null  Int64   \n"," 9   draft_round        12844 non-null  category\n"," 10  draft_number       12844 non-null  object  \n"," 11  gp                 12844 non-null  int64   \n"," 12  pts                12844 non-null  float64 \n"," 13  reb                12844 non-null  float64 \n"," 14  ast                12844 non-null  float64 \n"," 15  net_rating         12844 non-null  float64 \n"," 16  oreb_pct           12844 non-null  float64 \n"," 17  dreb_pct           12844 non-null  float64 \n"," 18  usg_pct            12844 non-null  float64 \n"," 19  ts_pct             12844 non-null  float64 \n"," 20  ast_pct            12844 non-null  float64 \n"," 21  season             12844 non-null  object  \n","dtypes: Int64(1), category(1), float64(11), int64(3), object(6)\n","memory usage: 2.1+ MB\n"]},{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0    player_name team_abbreviation  age  player_height  \\\n","0       10227   James Harden               HOU   29         195.58   \n","1        4163    Kobe Bryant               LAL   27         198.12   \n","2       10634   James Harden               HOU   30         195.58   \n","3       12839    Joel Embiid               PHI   29         213.36   \n","4        4302  Allen Iverson               PHI   31         182.88   \n","\n","   player_weight        college   country  draft_year draft_round  ...   pts  \\\n","0       99.79024  Arizona State       USA        2009           1  ...  36.1   \n","1       99.79024            NaN       USA        1996           1  ...  35.4   \n","2       99.79024  Arizona State       USA        2009           1  ...  34.3   \n","3      127.00576         Kansas  Cameroon        2014           1  ...  33.1   \n","4       74.84268     Georgetown       USA        1996           1  ...  33.0   \n","\n","    reb  ast  net_rating  oreb_pct  dreb_pct  usg_pct  ts_pct  ast_pct  \\\n","0   6.6  7.5         6.3     0.023     0.157    0.396   0.616    0.394   \n","1   5.3  4.5         4.7     0.026     0.127    0.384   0.559    0.228   \n","2   6.6  7.5         5.8     0.026     0.139    0.356   0.626    0.366   \n","3  10.2  4.2         8.8     0.057     0.243    0.370   0.655    0.233   \n","4   3.2  7.4         0.8     0.016     0.071    0.354   0.543    0.331   \n","\n","    season  \n","0  2018-19  \n","1  2005-06  \n","2  2019-20  \n","3  2022-23  \n","4  2005-06  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-514be503-27da-4f87-834f-65c22b403032\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>player_name</th>\n","      <th>team_abbreviation</th>\n","      <th>age</th>\n","      <th>player_height</th>\n","      <th>player_weight</th>\n","      <th>college</th>\n","      <th>country</th>\n","      <th>draft_year</th>\n","      <th>draft_round</th>\n","      <th>...</th>\n","      <th>pts</th>\n","      <th>reb</th>\n","      <th>ast</th>\n","      <th>net_rating</th>\n","      <th>oreb_pct</th>\n","      <th>dreb_pct</th>\n","      <th>usg_pct</th>\n","      <th>ts_pct</th>\n","      <th>ast_pct</th>\n","      <th>season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10227</td>\n","      <td>James Harden</td>\n","      <td>HOU</td>\n","      <td>29</td>\n","      <td>195.58</td>\n","      <td>99.79024</td>\n","      <td>Arizona State</td>\n","      <td>USA</td>\n","      <td>2009</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>36.1</td>\n","      <td>6.6</td>\n","      <td>7.5</td>\n","      <td>6.3</td>\n","      <td>0.023</td>\n","      <td>0.157</td>\n","      <td>0.396</td>\n","      <td>0.616</td>\n","      <td>0.394</td>\n","      <td>2018-19</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4163</td>\n","      <td>Kobe Bryant</td>\n","      <td>LAL</td>\n","      <td>27</td>\n","      <td>198.12</td>\n","      <td>99.79024</td>\n","      <td>NaN</td>\n","      <td>USA</td>\n","      <td>1996</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>35.4</td>\n","      <td>5.3</td>\n","      <td>4.5</td>\n","      <td>4.7</td>\n","      <td>0.026</td>\n","      <td>0.127</td>\n","      <td>0.384</td>\n","      <td>0.559</td>\n","      <td>0.228</td>\n","      <td>2005-06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10634</td>\n","      <td>James Harden</td>\n","      <td>HOU</td>\n","      <td>30</td>\n","      <td>195.58</td>\n","      <td>99.79024</td>\n","      <td>Arizona State</td>\n","      <td>USA</td>\n","      <td>2009</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>34.3</td>\n","      <td>6.6</td>\n","      <td>7.5</td>\n","      <td>5.8</td>\n","      <td>0.026</td>\n","      <td>0.139</td>\n","      <td>0.356</td>\n","      <td>0.626</td>\n","      <td>0.366</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12839</td>\n","      <td>Joel Embiid</td>\n","      <td>PHI</td>\n","      <td>29</td>\n","      <td>213.36</td>\n","      <td>127.00576</td>\n","      <td>Kansas</td>\n","      <td>Cameroon</td>\n","      <td>2014</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>33.1</td>\n","      <td>10.2</td>\n","      <td>4.2</td>\n","      <td>8.8</td>\n","      <td>0.057</td>\n","      <td>0.243</td>\n","      <td>0.370</td>\n","      <td>0.655</td>\n","      <td>0.233</td>\n","      <td>2022-23</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4302</td>\n","      <td>Allen Iverson</td>\n","      <td>PHI</td>\n","      <td>31</td>\n","      <td>182.88</td>\n","      <td>74.84268</td>\n","      <td>Georgetown</td>\n","      <td>USA</td>\n","      <td>1996</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>33.0</td>\n","      <td>3.2</td>\n","      <td>7.4</td>\n","      <td>0.8</td>\n","      <td>0.016</td>\n","      <td>0.071</td>\n","      <td>0.354</td>\n","      <td>0.543</td>\n","      <td>0.331</td>\n","      <td>2005-06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-514be503-27da-4f87-834f-65c22b403032')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-514be503-27da-4f87-834f-65c22b403032 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-514be503-27da-4f87-834f-65c22b403032');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1938aec0-26c8-4a53-989f-302acc037d26\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1938aec0-26c8-4a53-989f-302acc037d26')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1938aec0-26c8-4a53-989f-302acc037d26 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_seasons_df"}},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["The number of rows of not null values in DateYear and Date are not equal.\n","\n","Check each row for values- always good idea to check the column that gas more null values"],"metadata":{"id":"0Ku49Wf50uo6"}},{"cell_type":"markdown","source":["## 1.3. Remove unnecssary values"],"metadata":{"id":"NFV5IqnncRyP"}},{"cell_type":"markdown","source":["### 1.3.1. Check for duplicate rows, remove them if needed"],"metadata":{"id":"o6JxFOa0PWyh"}},{"cell_type":"code","source":["# check for duplicate rows using the duplicated().sum() functions - returns number of duplicate rows\n","duplicate_count = all_seasons_df.duplicated().sum()\n","\n","# Print the number of duplicate rows\n","print(f\"Number of duplicate rows: {duplicate_count}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tumVUYj1Pbt7","executionInfo":{"status":"ok","timestamp":1740622653053,"user_tz":300,"elapsed":10,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"0156c98f-dd36-4f43-bf95-d8003265f7c6"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of duplicate rows: 0\n"]}]},{"cell_type":"markdown","source":["if there was we would drop them with `drop_duplicates()` function called on the entire dataframe ."],"metadata":{"id":"2ezBFVr7u4Fi"}},{"cell_type":"markdown","source":["### 1.3.2. Removing unnecessary columns\n","\n","We can reduce the size of our combined dataset by removing columns that are not important for our analyses. Columns can be \"dropped\" from a DataFrame using the DataFrame method `drop()`."],"metadata":{"id":"2hWV2ioDvL0-"}},{"cell_type":"code","source":["# Print out the column labels for the full dataset of artworks and artist info\n","all_seasons_df.info()"],"metadata":{"id":"xAfOvQ9OvMg-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1740622653118,"user_tz":300,"elapsed":63,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"9dd463e9-e064-493b-b016-438fe1d60513"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 12844 entries, 0 to 12843\n","Data columns (total 22 columns):\n"," #   Column             Non-Null Count  Dtype   \n","---  ------             --------------  -----   \n"," 0   Unnamed: 0         12844 non-null  int64   \n"," 1   player_name        12844 non-null  object  \n"," 2   team_abbreviation  12844 non-null  object  \n"," 3   age                12844 non-null  int64   \n"," 4   player_height      12844 non-null  float64 \n"," 5   player_weight      12844 non-null  float64 \n"," 6   college            10990 non-null  object  \n"," 7   country            12844 non-null  object  \n"," 8   draft_year         10486 non-null  Int64   \n"," 9   draft_round        12844 non-null  category\n"," 10  draft_number       12844 non-null  object  \n"," 11  gp                 12844 non-null  int64   \n"," 12  pts                12844 non-null  float64 \n"," 13  reb                12844 non-null  float64 \n"," 14  ast                12844 non-null  float64 \n"," 15  net_rating         12844 non-null  float64 \n"," 16  oreb_pct           12844 non-null  float64 \n"," 17  dreb_pct           12844 non-null  float64 \n"," 18  usg_pct            12844 non-null  float64 \n"," 19  ts_pct             12844 non-null  float64 \n"," 20  ast_pct            12844 non-null  float64 \n"," 21  season             12844 non-null  object  \n","dtypes: Int64(1), category(1), float64(11), int64(3), object(6)\n","memory usage: 2.1+ MB\n"]}]},{"cell_type":"markdown","source":["We will not be using any of the external link resources, so we can remove the columns URL, ThumbnailURL."],"metadata":{"id":"g_ahi0UovVHk"}},{"cell_type":"code","source":["# Remove specified columns from the dataset using \"drop()\"\n","\n","all_seasons_df = all_seasons_df.drop(columns=['oreb_pct', 'dreb_pct'])\n","\n","# Print out the column labels from the new DataFrame\n","print(all_seasons_df.columns)"],"metadata":{"id":"XE6sPVcHvUbv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1740622653120,"user_tz":300,"elapsed":22,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"25637cde-fd53-4402-c002-645383fd01ce"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Unnamed: 0', 'player_name', 'team_abbreviation', 'age',\n","       'player_height', 'player_weight', 'college', 'country', 'draft_year',\n","       'draft_round', 'draft_number', 'gp', 'pts', 'reb', 'ast', 'net_rating',\n","       'usg_pct', 'ts_pct', 'ast_pct', 'season'],\n","      dtype='object')\n"]}]},{"cell_type":"markdown","source":["### 1.4.1. Consistency of missing values\n","\n","The values in the columns can also differ in how they are represented, this includes NaN values.\n","\n","For example in our dataset the `Date` column was used to create a more consitent `DateYear` column, but there is a difference in the length of each o f these columns.\n","\n","One needs to understand and eliminate the source of this inconsitency to clean the data."],"metadata":{"id":"m4GXxqeXGFT4"}},{"cell_type":"code","source":["all_seasons_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TCK1SKxXx1ex","executionInfo":{"status":"ok","timestamp":1740622653170,"user_tz":300,"elapsed":56,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"c97361ae-04e3-46a5-f384-78c24efbd681"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 12844 entries, 0 to 12843\n","Data columns (total 20 columns):\n"," #   Column             Non-Null Count  Dtype   \n","---  ------             --------------  -----   \n"," 0   Unnamed: 0         12844 non-null  int64   \n"," 1   player_name        12844 non-null  object  \n"," 2   team_abbreviation  12844 non-null  object  \n"," 3   age                12844 non-null  int64   \n"," 4   player_height      12844 non-null  float64 \n"," 5   player_weight      12844 non-null  float64 \n"," 6   college            10990 non-null  object  \n"," 7   country            12844 non-null  object  \n"," 8   draft_year         10486 non-null  Int64   \n"," 9   draft_round        12844 non-null  category\n"," 10  draft_number       12844 non-null  object  \n"," 11  gp                 12844 non-null  int64   \n"," 12  pts                12844 non-null  float64 \n"," 13  reb                12844 non-null  float64 \n"," 14  ast                12844 non-null  float64 \n"," 15  net_rating         12844 non-null  float64 \n"," 16  usg_pct            12844 non-null  float64 \n"," 17  ts_pct             12844 non-null  float64 \n"," 18  ast_pct            12844 non-null  float64 \n"," 19  season             12844 non-null  object  \n","dtypes: Int64(1), category(1), float64(9), int64(3), object(6)\n","memory usage: 1.9+ MB\n"]}]},{"cell_type":"markdown","source":["## 1.6. Data Wrangling\n","\n","> Wrangling is often used to change into a format that is usable, includes merging, subsetting and transformation.\n","\n"],"metadata":{"id":"AqG9w-WmECKG"}},{"cell_type":"markdown","metadata":{"id":"3CijFh6sNEga"},"source":["### 1.6.1. Replacing values in a column\n","\n","We can replace values in a column by first accessing that column and using the Series method `replace()` (*remember accessing one column from a DataFrame returns a pandas Series*). The `replace()` method can accept a dictionary of items in which the dictionary keys are the values to be replaced and the dictionary values are the new values to be inserted.\n","\n","We will demonstrate this method by replacing the values `Y` and `N` in the `Cataloged` column to the more explicit values `Yes` and `No`, respectively. Also, we will edit the DataFrame directly by including the keyword argument `inplace=True`."]},{"cell_type":"code","source":["# print the columns and the number of values and datatypes for reference\n","all_seasons_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7nwJT1cqPEV_","executionInfo":{"status":"ok","timestamp":1740622653214,"user_tz":300,"elapsed":42,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"98be8541-5ca6-412d-abd4-89e4b24bbff5"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 12844 entries, 0 to 12843\n","Data columns (total 20 columns):\n"," #   Column             Non-Null Count  Dtype   \n","---  ------             --------------  -----   \n"," 0   Unnamed: 0         12844 non-null  int64   \n"," 1   player_name        12844 non-null  object  \n"," 2   team_abbreviation  12844 non-null  object  \n"," 3   age                12844 non-null  int64   \n"," 4   player_height      12844 non-null  float64 \n"," 5   player_weight      12844 non-null  float64 \n"," 6   college            10990 non-null  object  \n"," 7   country            12844 non-null  object  \n"," 8   draft_year         10486 non-null  Int64   \n"," 9   draft_round        12844 non-null  category\n"," 10  draft_number       12844 non-null  object  \n"," 11  gp                 12844 non-null  int64   \n"," 12  pts                12844 non-null  float64 \n"," 13  reb                12844 non-null  float64 \n"," 14  ast                12844 non-null  float64 \n"," 15  net_rating         12844 non-null  float64 \n"," 16  usg_pct            12844 non-null  float64 \n"," 17  ts_pct             12844 non-null  float64 \n"," 18  ast_pct            12844 non-null  float64 \n"," 19  season             12844 non-null  object  \n","dtypes: Int64(1), category(1), float64(9), int64(3), object(6)\n","memory usage: 1.9+ MB\n"]}]},{"cell_type":"code","source":["all_seasons_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330},"id":"z5nL225KyRPF","executionInfo":{"status":"ok","timestamp":1740622653405,"user_tz":300,"elapsed":188,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"3d5278dd-cfbd-4deb-d1f3-b834bb7c98b6"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0    player_name team_abbreviation  age  player_height  \\\n","0       10227   James Harden               HOU   29         195.58   \n","1        4163    Kobe Bryant               LAL   27         198.12   \n","2       10634   James Harden               HOU   30         195.58   \n","3       12839    Joel Embiid               PHI   29         213.36   \n","4        4302  Allen Iverson               PHI   31         182.88   \n","\n","   player_weight        college   country  draft_year draft_round  \\\n","0       99.79024  Arizona State       USA        2009           1   \n","1       99.79024            NaN       USA        1996           1   \n","2       99.79024  Arizona State       USA        2009           1   \n","3      127.00576         Kansas  Cameroon        2014           1   \n","4       74.84268     Georgetown       USA        1996           1   \n","\n","  draft_number  gp   pts   reb  ast  net_rating  usg_pct  ts_pct  ast_pct  \\\n","0            3  78  36.1   6.6  7.5         6.3    0.396   0.616    0.394   \n","1           13  80  35.4   5.3  4.5         4.7    0.384   0.559    0.228   \n","2            3  68  34.3   6.6  7.5         5.8    0.356   0.626    0.366   \n","3            3  66  33.1  10.2  4.2         8.8    0.370   0.655    0.233   \n","4            1  72  33.0   3.2  7.4         0.8    0.354   0.543    0.331   \n","\n","    season  \n","0  2018-19  \n","1  2005-06  \n","2  2019-20  \n","3  2022-23  \n","4  2005-06  "],"text/html":["\n","  <div id=\"df-7dc10474-e45d-437f-af42-d40f34974cb1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>player_name</th>\n","      <th>team_abbreviation</th>\n","      <th>age</th>\n","      <th>player_height</th>\n","      <th>player_weight</th>\n","      <th>college</th>\n","      <th>country</th>\n","      <th>draft_year</th>\n","      <th>draft_round</th>\n","      <th>draft_number</th>\n","      <th>gp</th>\n","      <th>pts</th>\n","      <th>reb</th>\n","      <th>ast</th>\n","      <th>net_rating</th>\n","      <th>usg_pct</th>\n","      <th>ts_pct</th>\n","      <th>ast_pct</th>\n","      <th>season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10227</td>\n","      <td>James Harden</td>\n","      <td>HOU</td>\n","      <td>29</td>\n","      <td>195.58</td>\n","      <td>99.79024</td>\n","      <td>Arizona State</td>\n","      <td>USA</td>\n","      <td>2009</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>78</td>\n","      <td>36.1</td>\n","      <td>6.6</td>\n","      <td>7.5</td>\n","      <td>6.3</td>\n","      <td>0.396</td>\n","      <td>0.616</td>\n","      <td>0.394</td>\n","      <td>2018-19</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4163</td>\n","      <td>Kobe Bryant</td>\n","      <td>LAL</td>\n","      <td>27</td>\n","      <td>198.12</td>\n","      <td>99.79024</td>\n","      <td>NaN</td>\n","      <td>USA</td>\n","      <td>1996</td>\n","      <td>1</td>\n","      <td>13</td>\n","      <td>80</td>\n","      <td>35.4</td>\n","      <td>5.3</td>\n","      <td>4.5</td>\n","      <td>4.7</td>\n","      <td>0.384</td>\n","      <td>0.559</td>\n","      <td>0.228</td>\n","      <td>2005-06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10634</td>\n","      <td>James Harden</td>\n","      <td>HOU</td>\n","      <td>30</td>\n","      <td>195.58</td>\n","      <td>99.79024</td>\n","      <td>Arizona State</td>\n","      <td>USA</td>\n","      <td>2009</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>68</td>\n","      <td>34.3</td>\n","      <td>6.6</td>\n","      <td>7.5</td>\n","      <td>5.8</td>\n","      <td>0.356</td>\n","      <td>0.626</td>\n","      <td>0.366</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12839</td>\n","      <td>Joel Embiid</td>\n","      <td>PHI</td>\n","      <td>29</td>\n","      <td>213.36</td>\n","      <td>127.00576</td>\n","      <td>Kansas</td>\n","      <td>Cameroon</td>\n","      <td>2014</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>66</td>\n","      <td>33.1</td>\n","      <td>10.2</td>\n","      <td>4.2</td>\n","      <td>8.8</td>\n","      <td>0.370</td>\n","      <td>0.655</td>\n","      <td>0.233</td>\n","      <td>2022-23</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4302</td>\n","      <td>Allen Iverson</td>\n","      <td>PHI</td>\n","      <td>31</td>\n","      <td>182.88</td>\n","      <td>74.84268</td>\n","      <td>Georgetown</td>\n","      <td>USA</td>\n","      <td>1996</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>72</td>\n","      <td>33.0</td>\n","      <td>3.2</td>\n","      <td>7.4</td>\n","      <td>0.8</td>\n","      <td>0.354</td>\n","      <td>0.543</td>\n","      <td>0.331</td>\n","      <td>2005-06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7dc10474-e45d-437f-af42-d40f34974cb1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7dc10474-e45d-437f-af42-d40f34974cb1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7dc10474-e45d-437f-af42-d40f34974cb1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6f68ee3f-6330-495a-b963-cf2136dfe49a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f68ee3f-6330-495a-b963-cf2136dfe49a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6f68ee3f-6330-495a-b963-cf2136dfe49a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_seasons_df","summary":"{\n  \"name\": \"all_seasons_df\",\n  \"rows\": 12844,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3707,\n        \"min\": 0,\n        \"max\": 12843,\n        \"num_unique_values\": 12844,\n        \"samples\": [\n          9631,\n          2091,\n          12201\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2551,\n        \"samples\": [\n          \"Yao Ming\",\n          \"Eric Williams\",\n          \"Mangok Mathiang\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team_abbreviation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 36,\n        \"samples\": [\n          \"NOK\",\n          \"BKN\",\n          \"CHH\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 18,\n        \"max\": 44,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          28,\n          34,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.11109021454785,\n        \"min\": 160.02,\n        \"max\": 231.14,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          167.64,\n          228.6,\n          218.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.426628079577775,\n        \"min\": 60.327736,\n        \"max\": 163.29312,\n        \"num_unique_values\": 157,\n        \"samples\": [\n          116.573144,\n          111.583632,\n          127.459352\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"college\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 356,\n        \"samples\": [\n          \"Delaware State\",\n          \"Purdue\",\n          \"Master's\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 82,\n        \"samples\": [\n          \"Poland\",\n          \"USA\",\n          \"Turkey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draft_year\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 47,\n        \"samples\": [\n          1994,\n          1982,\n          1988\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draft_round\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"4\",\n          \"2\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draft_number\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 76,\n        \"samples\": [\n          \"9\",\n          \"18\",\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 1,\n        \"max\": 85,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          21,\n          78,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.016573484058173,\n        \"min\": 0.0,\n        \"max\": 36.1,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          24.5,\n          10.0,\n          29.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4778845056198215,\n        \"min\": 0.0,\n        \"max\": 16.3,\n        \"num_unique_values\": 153,\n        \"samples\": [\n          7.7,\n          3.6,\n          2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8008397815911714,\n        \"min\": 0.0,\n        \"max\": 11.7,\n        \"num_unique_values\": 115,\n        \"samples\": [\n          1.7,\n          8.0,\n          2.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.665124137584955,\n        \"min\": -250.0,\n        \"max\": 300.0,\n        \"num_unique_values\": 772,\n        \"samples\": [\n          -61.8,\n          -1.1,\n          -35.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"usg_pct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.053544882715974185,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 348,\n        \"samples\": [\n          0.106,\n          0.258,\n          0.076\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ts_pct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10172427061690867,\n        \"min\": 0.0,\n        \"max\": 1.5,\n        \"num_unique_values\": 563,\n        \"samples\": [\n          0.674,\n          1.078,\n          0.695\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast_pct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09417180302675791,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 483,\n        \"samples\": [\n          0.465,\n          0.004,\n          0.116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"2016-17\",\n          \"2017-18\",\n          \"2001-02\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Reformat columns to use imperial units\n","\n","# Convert weight from kg to lb (1 kg = 2.20462 lb)\n","all_seasons_df['player_weight'] = (all_seasons_df['player_weight'] * 2.20462).round(1)\n","\n","# Convert height from cm to in (1 cm = 0.393701 in)\n","all_seasons_df['player_height'] = (all_seasons_df['player_height'] * 0.393701).round(1)\n","\n"],"metadata":{"id":"oBtAHyrYh2cZ","executionInfo":{"status":"ok","timestamp":1740622653407,"user_tz":300,"elapsed":17,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["all_seasons_df.head()\n","print(all_seasons_df[all_seasons_df['player_name'] == 'Stephen Curry'])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zhl0V_i6y_QM","executionInfo":{"status":"ok","timestamp":1740622653447,"user_tz":300,"elapsed":44,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"db116ed6-a981-42a0-adc1-cbc643767291"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["      Unnamed: 0    player_name team_abbreviation  age  player_height  \\\n","9          11537  Stephen Curry               GSW   33           75.0   \n","25          8930  Stephen Curry               GSW   28           75.0   \n","38         12434  Stephen Curry               GSW   35           74.0   \n","95         10390  Stephen Curry               GSW   31           75.0   \n","139         9801  Stephen Curry               GSW   30           75.0   \n","182        12250  Stephen Curry               GSW   34           74.0   \n","193         9257  Stephen Curry               GSW   29           75.0   \n","263         7941  Stephen Curry               GSW   26           75.0   \n","271         8303  Stephen Curry               GSW   27           75.0   \n","339         7213  Stephen Curry               GSW   25           75.0   \n","569        10961  Stephen Curry               GSW   32           75.0   \n","943         6471  Stephen Curry               GSW   23           75.0   \n","1168        5876  Stephen Curry               GSW   22           75.0   \n","1902        7111  Stephen Curry               GSW   24           75.0   \n","\n","      player_weight   college country  draft_year draft_round draft_number  \\\n","9             185.0  Davidson     USA        2009           1            7   \n","25            190.0  Davidson     USA        2009           1            7   \n","38            185.0  Davidson     USA        2009           1            7   \n","95            190.0  Davidson     USA        2009           1            7   \n","139           190.0  Davidson     USA        2009           1            7   \n","182           185.0  Davidson     USA        2009           1            7   \n","193           190.0  Davidson     USA        2009           1            7   \n","263           185.0  Davidson     USA        2009           1            7   \n","271           190.0  Davidson     USA        2009           1            7   \n","339           185.0  Davidson     USA        2009           1            7   \n","569           185.0  Davidson     USA        2009           1            7   \n","943           185.0  Davidson     USA        2009           1            7   \n","1168          185.0  Davidson     USA        2009           1            7   \n","1902          185.0  Davidson     USA        2009           1            7   \n","\n","      gp   pts  reb  ast  net_rating  usg_pct  ts_pct  ast_pct   season  \n","9     63  32.0  5.5  5.8         4.6    0.331   0.655    0.283  2020-21  \n","25    79  30.1  5.4  6.7        18.3    0.320   0.669    0.315  2015-16  \n","38    56  29.4  6.1  6.3         5.8    0.297   0.656    0.274  2022-23  \n","95    69  27.3  5.3  5.2        13.7    0.292   0.641    0.225  2018-19  \n","139   51  26.4  5.1  6.1        13.0    0.290   0.675    0.272  2017-18  \n","182   64  25.5  5.2  6.3        10.7    0.293   0.601    0.286  2021-22  \n","193   79  25.3  4.5  6.6        17.2    0.292   0.624    0.287  2016-17  \n","263   78  24.0  4.3  8.5         9.4    0.281   0.610    0.372  2013-14  \n","271   80  23.8  4.3  7.7        17.0    0.283   0.638    0.358  2014-15  \n","339   78  22.9  4.0  6.9         2.4    0.261   0.589    0.298  2012-13  \n","569    5  20.8  5.2  6.6       -15.3    0.286   0.557    0.355  2019-20  \n","943   74  18.6  3.9  5.8        -0.6    0.242   0.595    0.268  2010-11  \n","1168  80  17.5  4.5  5.9        -3.1    0.218   0.568    0.241  2009-10  \n","1902  26  14.7  3.4  5.3         5.4    0.235   0.605    0.295  2011-12  \n"]}]},{"cell_type":"markdown","source":["### 1.6.5 groupby and Aggregation"],"metadata":{"id":"OXcAM1z_t84L"}},{"cell_type":"code","source":["# For duplicate players, choose the season with the highest points\n","all_seasons_df.head()\n","\n","all_seasons_df = all_seasons_df.loc[all_seasons_df.groupby('player_name')['pts'].idxmax()]\n"],"metadata":{"id":"0tHmifdTYAN5","executionInfo":{"status":"ok","timestamp":1740622653451,"user_tz":300,"elapsed":3,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["print(all_seasons_df[all_seasons_df['player_name'] == 'Stephen Curry'])\n","all_seasons_df.info()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vKREOqdmzGgs","executionInfo":{"status":"ok","timestamp":1740622653551,"user_tz":300,"elapsed":97,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"d9349f8a-d8ac-4f75-bd74-68374909470d"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0    player_name team_abbreviation  age  player_height  \\\n","9       11537  Stephen Curry               GSW   33           75.0   \n","\n","   player_weight   college country  draft_year draft_round draft_number  gp  \\\n","9          185.0  Davidson     USA        2009           1            7  63   \n","\n","    pts  reb  ast  net_rating  usg_pct  ts_pct  ast_pct   season  \n","9  32.0  5.5  5.8         4.6    0.331   0.655    0.283  2020-21  \n","<class 'pandas.core.frame.DataFrame'>\n","Index: 2551 entries, 5871 to 10365\n","Data columns (total 20 columns):\n"," #   Column             Non-Null Count  Dtype   \n","---  ------             --------------  -----   \n"," 0   Unnamed: 0         2551 non-null   int64   \n"," 1   player_name        2551 non-null   object  \n"," 2   team_abbreviation  2551 non-null   object  \n"," 3   age                2551 non-null   int64   \n"," 4   player_height      2551 non-null   float64 \n"," 5   player_weight      2551 non-null   float64 \n"," 6   college            2208 non-null   object  \n"," 7   country            2551 non-null   object  \n"," 8   draft_year         1783 non-null   Int64   \n"," 9   draft_round        2551 non-null   category\n"," 10  draft_number       2551 non-null   object  \n"," 11  gp                 2551 non-null   int64   \n"," 12  pts                2551 non-null   float64 \n"," 13  reb                2551 non-null   float64 \n"," 14  ast                2551 non-null   float64 \n"," 15  net_rating         2551 non-null   float64 \n"," 16  usg_pct            2551 non-null   float64 \n"," 17  ts_pct             2551 non-null   float64 \n"," 18  ast_pct            2551 non-null   float64 \n"," 19  season             2551 non-null   object  \n","dtypes: Int64(1), category(1), float64(9), int64(3), object(6)\n","memory usage: 403.9+ KB\n"]}]},{"cell_type":"code","source":["all_seasons_df"],"metadata":{"id":"u5P-mdsJPOq5","executionInfo":{"status":"ok","timestamp":1740623388446,"user_tz":300,"elapsed":89,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"ed835118-c9f2-4459-d052-10b1fb19ea63","colab":{"base_uri":"https://localhost:8080/","height":635}},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Unnamed: 0         player_name team_abbreviation  age  player_height  \\\n","5871          667          A.C. Green               DAL   34           81.0   \n","12305        1625       A.J. Bramlett               CLE   23           82.0   \n","7047         1970         A.J. Guyton               CHI   23           73.0   \n","9578        12588         A.J. Lawson               DAL   22           78.0   \n","8774        12589            AJ Green               MIL   23           77.0   \n","...           ...                 ...               ...  ...            ...   \n","110         11329     Zion Williamson               NOP   20           79.0   \n","11688        8349        Zoran Dragic               MIA   26           77.0   \n","8041         3666      Zoran Planinic               NJN   22           79.0   \n","1227         2821  Zydrunas Ilgauskas               CLE   28           87.0   \n","10365       11030      Zylan Cheatham               NOP   24           77.0   \n","\n","       player_weight         college    country  draft_year draft_round  \\\n","5871           225.0    Oregon State        USA        1985           1   \n","12305          227.0         Arizona        USA        1999           2   \n","7047           180.0         Indiana        USA        2000           2   \n","9578           179.0  South Carolina     Canada        <NA>   Undrafted   \n","8774           190.0   Northern Iowa        USA        <NA>   Undrafted   \n","...              ...             ...        ...         ...         ...   \n","110            284.0            Duke        USA        2019           1   \n","11688          200.0             NaN   Slovenia        <NA>   Undrafted   \n","8041           200.0             NaN    Croatia        2003           1   \n","1227           260.0             NaN  Lithuania        1996           1   \n","10365          220.0   Arizona State        USA        <NA>   Undrafted   \n","\n","      draft_number  gp   pts  reb  ast  net_rating  usg_pct  ts_pct  ast_pct  \\\n","5871            23  82   7.3  8.1  1.5        -7.2    0.118   0.496    0.074   \n","12305           39   8   1.0  2.8  0.0       -32.6    0.146   0.190    0.000   \n","7047            32  33   6.0  1.1  1.9       -12.4    0.169   0.495    0.198   \n","9578     Undrafted  15   3.7  1.4  0.1       -20.1    0.189   0.589    0.032   \n","8774     Undrafted  35   4.4  1.3  0.6        -4.9    0.159   0.607    0.092   \n","...            ...  ..   ...  ...  ...         ...      ...     ...      ...   \n","110              1  61  27.0  7.2  3.7         2.1    0.287   0.649    0.188   \n","11688    Undrafted  16   1.8  0.5  0.3       -15.3    0.217   0.435    0.116   \n","8041            22  43   5.0  1.6  1.0        -4.8    0.227   0.534    0.185   \n","1227            20  81  17.2  7.5  1.6        -7.9    0.279   0.516    0.101   \n","10365    Undrafted   4   3.0  2.3  0.8       -23.9    0.103   0.667    0.094   \n","\n","        season  \n","5871   1997-98  \n","12305  1999-00  \n","7047   2000-01  \n","9578   2022-23  \n","8774   2022-23  \n","...        ...  \n","110    2020-21  \n","11688  2014-15  \n","8041   2004-05  \n","1227   2002-03  \n","10365  2019-20  \n","\n","[2551 rows x 20 columns]"],"text/html":["\n","  <div id=\"df-5fe6793c-a5e6-4c7f-a500-f5cd0f54aa5e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>player_name</th>\n","      <th>team_abbreviation</th>\n","      <th>age</th>\n","      <th>player_height</th>\n","      <th>player_weight</th>\n","      <th>college</th>\n","      <th>country</th>\n","      <th>draft_year</th>\n","      <th>draft_round</th>\n","      <th>draft_number</th>\n","      <th>gp</th>\n","      <th>pts</th>\n","      <th>reb</th>\n","      <th>ast</th>\n","      <th>net_rating</th>\n","      <th>usg_pct</th>\n","      <th>ts_pct</th>\n","      <th>ast_pct</th>\n","      <th>season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5871</th>\n","      <td>667</td>\n","      <td>A.C. Green</td>\n","      <td>DAL</td>\n","      <td>34</td>\n","      <td>81.0</td>\n","      <td>225.0</td>\n","      <td>Oregon State</td>\n","      <td>USA</td>\n","      <td>1985</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>82</td>\n","      <td>7.3</td>\n","      <td>8.1</td>\n","      <td>1.5</td>\n","      <td>-7.2</td>\n","      <td>0.118</td>\n","      <td>0.496</td>\n","      <td>0.074</td>\n","      <td>1997-98</td>\n","    </tr>\n","    <tr>\n","      <th>12305</th>\n","      <td>1625</td>\n","      <td>A.J. Bramlett</td>\n","      <td>CLE</td>\n","      <td>23</td>\n","      <td>82.0</td>\n","      <td>227.0</td>\n","      <td>Arizona</td>\n","      <td>USA</td>\n","      <td>1999</td>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>8</td>\n","      <td>1.0</td>\n","      <td>2.8</td>\n","      <td>0.0</td>\n","      <td>-32.6</td>\n","      <td>0.146</td>\n","      <td>0.190</td>\n","      <td>0.000</td>\n","      <td>1999-00</td>\n","    </tr>\n","    <tr>\n","      <th>7047</th>\n","      <td>1970</td>\n","      <td>A.J. Guyton</td>\n","      <td>CHI</td>\n","      <td>23</td>\n","      <td>73.0</td>\n","      <td>180.0</td>\n","      <td>Indiana</td>\n","      <td>USA</td>\n","      <td>2000</td>\n","      <td>2</td>\n","      <td>32</td>\n","      <td>33</td>\n","      <td>6.0</td>\n","      <td>1.1</td>\n","      <td>1.9</td>\n","      <td>-12.4</td>\n","      <td>0.169</td>\n","      <td>0.495</td>\n","      <td>0.198</td>\n","      <td>2000-01</td>\n","    </tr>\n","    <tr>\n","      <th>9578</th>\n","      <td>12588</td>\n","      <td>A.J. Lawson</td>\n","      <td>DAL</td>\n","      <td>22</td>\n","      <td>78.0</td>\n","      <td>179.0</td>\n","      <td>South Carolina</td>\n","      <td>Canada</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>Undrafted</td>\n","      <td>Undrafted</td>\n","      <td>15</td>\n","      <td>3.7</td>\n","      <td>1.4</td>\n","      <td>0.1</td>\n","      <td>-20.1</td>\n","      <td>0.189</td>\n","      <td>0.589</td>\n","      <td>0.032</td>\n","      <td>2022-23</td>\n","    </tr>\n","    <tr>\n","      <th>8774</th>\n","      <td>12589</td>\n","      <td>AJ Green</td>\n","      <td>MIL</td>\n","      <td>23</td>\n","      <td>77.0</td>\n","      <td>190.0</td>\n","      <td>Northern Iowa</td>\n","      <td>USA</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>Undrafted</td>\n","      <td>Undrafted</td>\n","      <td>35</td>\n","      <td>4.4</td>\n","      <td>1.3</td>\n","      <td>0.6</td>\n","      <td>-4.9</td>\n","      <td>0.159</td>\n","      <td>0.607</td>\n","      <td>0.092</td>\n","      <td>2022-23</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>11329</td>\n","      <td>Zion Williamson</td>\n","      <td>NOP</td>\n","      <td>20</td>\n","      <td>79.0</td>\n","      <td>284.0</td>\n","      <td>Duke</td>\n","      <td>USA</td>\n","      <td>2019</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>61</td>\n","      <td>27.0</td>\n","      <td>7.2</td>\n","      <td>3.7</td>\n","      <td>2.1</td>\n","      <td>0.287</td>\n","      <td>0.649</td>\n","      <td>0.188</td>\n","      <td>2020-21</td>\n","    </tr>\n","    <tr>\n","      <th>11688</th>\n","      <td>8349</td>\n","      <td>Zoran Dragic</td>\n","      <td>MIA</td>\n","      <td>26</td>\n","      <td>77.0</td>\n","      <td>200.0</td>\n","      <td>NaN</td>\n","      <td>Slovenia</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>Undrafted</td>\n","      <td>Undrafted</td>\n","      <td>16</td>\n","      <td>1.8</td>\n","      <td>0.5</td>\n","      <td>0.3</td>\n","      <td>-15.3</td>\n","      <td>0.217</td>\n","      <td>0.435</td>\n","      <td>0.116</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>8041</th>\n","      <td>3666</td>\n","      <td>Zoran Planinic</td>\n","      <td>NJN</td>\n","      <td>22</td>\n","      <td>79.0</td>\n","      <td>200.0</td>\n","      <td>NaN</td>\n","      <td>Croatia</td>\n","      <td>2003</td>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>43</td>\n","      <td>5.0</td>\n","      <td>1.6</td>\n","      <td>1.0</td>\n","      <td>-4.8</td>\n","      <td>0.227</td>\n","      <td>0.534</td>\n","      <td>0.185</td>\n","      <td>2004-05</td>\n","    </tr>\n","    <tr>\n","      <th>1227</th>\n","      <td>2821</td>\n","      <td>Zydrunas Ilgauskas</td>\n","      <td>CLE</td>\n","      <td>28</td>\n","      <td>87.0</td>\n","      <td>260.0</td>\n","      <td>NaN</td>\n","      <td>Lithuania</td>\n","      <td>1996</td>\n","      <td>1</td>\n","      <td>20</td>\n","      <td>81</td>\n","      <td>17.2</td>\n","      <td>7.5</td>\n","      <td>1.6</td>\n","      <td>-7.9</td>\n","      <td>0.279</td>\n","      <td>0.516</td>\n","      <td>0.101</td>\n","      <td>2002-03</td>\n","    </tr>\n","    <tr>\n","      <th>10365</th>\n","      <td>11030</td>\n","      <td>Zylan Cheatham</td>\n","      <td>NOP</td>\n","      <td>24</td>\n","      <td>77.0</td>\n","      <td>220.0</td>\n","      <td>Arizona State</td>\n","      <td>USA</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>Undrafted</td>\n","      <td>Undrafted</td>\n","      <td>4</td>\n","      <td>3.0</td>\n","      <td>2.3</td>\n","      <td>0.8</td>\n","      <td>-23.9</td>\n","      <td>0.103</td>\n","      <td>0.667</td>\n","      <td>0.094</td>\n","      <td>2019-20</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2551 rows × 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5fe6793c-a5e6-4c7f-a500-f5cd0f54aa5e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5fe6793c-a5e6-4c7f-a500-f5cd0f54aa5e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5fe6793c-a5e6-4c7f-a500-f5cd0f54aa5e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-39a87f4c-f3b4-4a19-ba09-4bac2129808a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-39a87f4c-f3b4-4a19-ba09-4bac2129808a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-39a87f4c-f3b4-4a19-ba09-4bac2129808a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_32b60daa-4e46-4f04-8446-6d5ea24428c6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('all_seasons_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_32b60daa-4e46-4f04-8446-6d5ea24428c6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('all_seasons_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_seasons_df","summary":"{\n  \"name\": \"all_seasons_df\",\n  \"rows\": 2551,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4262,\n        \"min\": 1,\n        \"max\": 12842,\n        \"num_unique_values\": 2551,\n        \"samples\": [\n          3818,\n          7030,\n          215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2551,\n        \"samples\": [\n          \"Alex Garcia\",\n          \"Ben Uzoh\",\n          \"Stacey King\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team_abbreviation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 36,\n        \"samples\": [\n          \"DET\",\n          \"PHX\",\n          \"MEM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 19,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          29,\n          33,\n          34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.564355377737558,\n        \"min\": 63.0,\n        \"max\": 91.0,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          90.0,\n          86.0,\n          71.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.401342687246917,\n        \"min\": 133.0,\n        \"max\": 360.0,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          360.0,\n          169.0,\n          187.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"college\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 337,\n        \"samples\": [\n          \"Alabama\",\n          \"Saint Joseph's\",\n          \"College of Charleston\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 81,\n        \"samples\": [\n          \"Nigeria\",\n          \"USA\",\n          \"DRC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draft_year\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 47,\n        \"samples\": [\n          2001,\n          1989,\n          1996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draft_round\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"7\",\n          \"2\",\n          \"4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draft_number\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 76,\n        \"samples\": [\n          \"16\",\n          \"47\",\n          \"17\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 1,\n        \"max\": 84,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          34,\n          82,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.55136157205671,\n        \"min\": 0.0,\n        \"max\": 36.1,\n        \"num_unique_values\": 284,\n        \"samples\": [\n          17.6,\n          18.8,\n          12.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.53727354720894,\n        \"min\": 0.0,\n        \"max\": 16.3,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          14.4,\n          0.6,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7680267719316438,\n        \"min\": 0.0,\n        \"max\": 11.4,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          4.2,\n          0.3,\n          9.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.44075947717213,\n        \"min\": -158.3,\n        \"max\": 250.0,\n        \"num_unique_values\": 533,\n        \"samples\": [\n          -0.6,\n          -33.4,\n          -2.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"usg_pct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05712013932446653,\n        \"min\": 0.0,\n        \"max\": 0.75,\n        \"num_unique_values\": 287,\n        \"samples\": [\n          0.238,\n          0.104,\n          0.287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ts_pct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1254197949012631,\n        \"min\": 0.0,\n        \"max\": 1.5,\n        \"num_unique_values\": 422,\n        \"samples\": [\n          0.476,\n          0.64,\n          0.318\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast_pct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09507067956140114,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 378,\n        \"samples\": [\n          0.212,\n          0.408,\n          0.325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"2007-08\",\n          \"2020-21\",\n          \"2021-22\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["from google.colab import drive\n","from google.colab import files\n","\n","all_seasons_df.to_csv('best_seasons.csv')\n","\n","files.download('best_seasons.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"Hop09vxmMRFP","executionInfo":{"status":"ok","timestamp":1740622678626,"user_tz":300,"elapsed":59,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}},"outputId":"8cd91ee2-a4d5-4118-c61f-e5c1261f80b8"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_d09e1a43-555f-4712-9d0a-201a1c63d2ff\", \"best_seasons.csv\", 295037)"]},"metadata":{}}]},{"cell_type":"markdown","source":["## 1.7. Data Merging"],"metadata":{"id":"y2a0bRhg-yA7"}},{"cell_type":"markdown","source":["### 1.7.1. Load the multiple datasets\n","\n","We have prepared the data from the MoMA dataset for this workshop. We will import those datasets into our notebook to use them for data analysis.\n","\n","Datasets can be stored in several types of files, including .csv, .json, .txt, .xls, .xlsx, and more. Here we will import a .csv file and a .json file.\n","\n","Preview the CSV file\n","Preview the EXCEL file\n","Preview the JSON file\n","\n","Use this link for File 1: https://raw.githubusercontent.com/ncsu-libraries-data-vis/teaching-datasets/main/moma_data/moma_paintings.csv\n","\n","For File 2: https://raw.githubusercontent.com/ncsu-libraries-data-vis/teaching-datasets/main/moma_data/moma_photographs.xlsx\n","\n","For file 3: https://raw.githubusercontent.com/ncsu-libraries-data-vis/teaching-datasets/main/moma_data/moma_sculptures.json\n"],"metadata":{"id":"Fr_a_6dqudB7"}},{"cell_type":"code","source":["# load file 3 sculptures\n","sculptures = pd.read_json('https://raw.githubusercontent.com/ncsu-libraries-data-vis/teaching-datasets/main/moma_data/moma_sculptures.json')\n","sculptures.head()"],"metadata":{"id":"4DT_82Cji_FB","executionInfo":{"status":"aborted","timestamp":1740622653707,"user_tz":300,"elapsed":2784,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Get to know your data"],"metadata":{"id":"UicrlJpdjFGo"}},{"cell_type":"code","source":["# shape\n","\n","# columns\n","\n","# index\n","\n","# inspect columns for missing data\n","\n","# identify categorical columns\n","\n","# make categorical categorical\n","\n","# make numbers consistent\n","\n","# handle in missing data\n","\n"],"metadata":{"id":"kbInb2YtjJLo","executionInfo":{"status":"aborted","timestamp":1740622653762,"user_tz":300,"elapsed":7,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 1.7.2. Identify columns that are common\n","\n","Two ways to merge:\n","\n","1. If all columns are same - long merge,\n","2. if one or more columns are similar - more checks needed\n","\n","We will look at only case 1 today.\n"],"metadata":{"id":"TFan7W5qjjIW"}},{"cell_type":"markdown","source":["#### 1.7.2.1 Long merge\n"," We want to make sure the columns are exactly the same - do we have same columns?\n","\n"," The cleaned dataframes of each dataset is merged"],"metadata":{"id":"fDLlZNwXkMHK"}},{"cell_type":"code","source":["# Identify the columns that does not match\n","sculptures.head()"],"metadata":{"id":"1uc5-FMXk5ky","executionInfo":{"status":"aborted","timestamp":1740622653766,"user_tz":300,"elapsed":9,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### 1.7.2.1.1 Reset DataFrame index labels\n","\n","The JSON file of sculpture artworks we imported does not include the column `Index`. Instead, these values are used as the index labels. We want this dataset to match the format of our paintings and photographs datasets, so we first need to reset the index of the `sculptures` dataset using the DataFrame method `reset_index()`."],"metadata":{"id":"xP4oLvnxt6Pe"}},{"cell_type":"code","source":["# Reset the sculptures DataFrame index\n","sculptures_reset = sculptures.reset_index()\n","\n","\n","# Print out the resulting dataset\n","sculptures_reset.head()"],"metadata":{"id":"9pqfCUlEucHl","executionInfo":{"status":"aborted","timestamp":1740622653769,"user_tz":300,"elapsed":10,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Renaming column labels\n","When we reset our index a new column with the label index was created. Let's change the name of this column to Index (with an uppercase \"I\") to match our other datasets using the DataFrame method rename().\n","\n"],"metadata":{"id":"dLyL3dqDuhCp"}},{"cell_type":"code","source":["# Rename the column we created to differentiate from the default index\n","sculptures_rename = sculptures_reset.rename(columns={'index': 'Index'})\n","\n","# Print out the first five columns of the dataset\n","sculptures_rename"],"metadata":{"id":"co3IkbyQujgz","executionInfo":{"status":"aborted","timestamp":1740622653772,"user_tz":300,"elapsed":12,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### 1.7.2.1.2 Concatenate DataFrames\n","We want to be able to work with all of the data we have imported at once, so we need to pull all two DataFrames into one DataFrame. They all have the same column format now, so we can concatenate them based on column name and order (similar to adding them together, one on top of another) using the pandas method concat().\n","\n","We also need to consider the current index labels for each dataset. We will create a new zero-based integer index label for the concatenated dataset by passing the keyword argument ignore_index=True into the concat() method.\n","\n","Ensure you are concatenating the cleaned dataframes."],"metadata":{"id":"ZXjmAXu4uqG1"}},{"cell_type":"code","source":["# Concatenate all the datasets into one\n","moma_art = pd.concat([paintings, sculptures_rename], ignore_index=True)\n","\n","\n","# Print the shape (number of rows and columns) of the full DataFrame\n","moma_art.shape"],"metadata":{"id":"iweF-7nHuozP","executionInfo":{"status":"aborted","timestamp":1740622653779,"user_tz":300,"elapsed":3,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 1.7.2.2 Broad Merge\n","\n","In cases where borad merge based on common column is required."],"metadata":{"id":"TV797N3ena3E"}},{"cell_type":"code","source":["# consider the file 2: For File 2:\n","# with URL: https://raw.githubusercontent.com/ncsu-libraries-data-vis/teaching-datasets/main/moma_data/moma_photographs.xlsx\n","photos = pd.read_excel('https://raw.githubusercontent.com/ncsu-libraries-data-vis/teaching-datasets/main/moma_data/moma_photographs.xlsx')\n","photos.head()\n","\n","# import the file to pandas\n","\n"],"metadata":{"id":"Ky2THmcMoVo6","executionInfo":{"status":"aborted","timestamp":1740622653781,"user_tz":300,"elapsed":4,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# get to know and clean data"],"metadata":{"id":"tJZ-1YDXohLF","executionInfo":{"status":"aborted","timestamp":1740622653784,"user_tz":300,"elapsed":6,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Identify the column you want to merge on\n","\n","\n","# How do you identify?\n","# the format and values should be consistent across the datasets\n","\n","# you could merge and see if it works\n","\n","# or you can find values that are common\n","\n","import pandas as pd\n","\n","common_ids = list(set(paintings[\"ConstituentID\"]) & set(photos[\"ConstituentID\"]))\n","print(len(common_ids))\n","\n","common_artists = list(set(paintings[\"Artist\"]) & set(photos[\"Artist\"]))\n","print(common_artists)\n","\n"],"metadata":{"id":"C-8tVyMcoB4d","executionInfo":{"status":"aborted","timestamp":1740622653788,"user_tz":300,"elapsed":2823,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["If the common values exist merge it or else look for other columns"],"metadata":{"id":"haKBWrtSbbkA"}},{"cell_type":"markdown","source":["### Join DataFrames on shared column values\n","\n","Our dataset includes a column of unique artist IDs (`ConstituentID`) that identify a specific artist."],"metadata":{"id":"17twmeAFubiM"}},{"cell_type":"markdown","source":["![Left join visual example](https://github.com/ncsu-libraries-data-vis/python-open-labs/blob/main/Open_Lab_2_working_with_multiple_datasets_in_pandas/left-join.png?raw=1)\n","\n","We will use a \"left\" join to merge columns from the `photos` DataFrame into the `moma_art` DataFrame based on matching values in each DataFrame's `ConstituentID` column.\n","\n","Read more about [joins](https://www.geeksforgeeks.org/different-types-of-joins-in-pandas/)."],"metadata":{"id":"Dyxq1tGOu48v"}},{"cell_type":"code","source":["# Create a new DataFrame from a \"left\" join of the full artworks DataFrame\n","# and the artists DataFrame base on the shared column \"ConstituentID\"\n","moma_art_photos = paintings.merge(photos, how='left', on='ConstituentID')\n","\n","# Print out the new merged dataset\n","moma_art_photos.head()"],"metadata":{"id":"84DXr-BbvFHK","executionInfo":{"status":"aborted","timestamp":1740622653792,"user_tz":300,"elapsed":2819,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["moma_art_photos.info()"],"metadata":{"id":"psi86TIGf3V4","executionInfo":{"status":"aborted","timestamp":1740622653796,"user_tz":300,"elapsed":2816,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["There are also other joins, like inner join that only joins"],"metadata":{"id":"BghLQAJ3fmBF"}},{"cell_type":"markdown","metadata":{"id":"xr-lFuZhNEgb"},"source":["## Try it yourself\n","\n","For these exercises you will be using a dataset that consists of MoMA artworks classified as photographs and each photograph's associated artist information. This dataset has the same columns and column names as the original paintings dataset from the guided activity.\n","\n","Before starting the exercises you will need to load the new dataset as DataFrames. It is available as a CSV file and the URL to the file is provided in the variable below."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Iy_pUp_ANEgb","executionInfo":{"status":"aborted","timestamp":1740622653798,"user_tz":300,"elapsed":2817,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"outputs":[],"source":["# URLs to the photographs dataset\n","photos_file_url = 'https://raw.githubusercontent.com/ncsu-libraries-data-vis/teaching-datasets/main/moma_data/moma_photographs_full.csv'\n","\n","# Import the photographs dataset as a DataFrame\n"]},{"cell_type":"markdown","metadata":{"id":"ytpenESKNEgb"},"source":["### Exercise 1: Rename column values\n","\n","In the photographs dataset, replace the values in the column `Cataloged`. Replace all occurrences of the value `Y` with the value `Yes` and all occurrences of the value `N` with the value `No`. Overwrite the existing values with the new values."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N9IsEk3vNEgb","executionInfo":{"status":"aborted","timestamp":1740622653802,"user_tz":300,"elapsed":2819,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"outputs":[],"source":["# Replace the values \"Y\" and \"N\" in the \"Cataloged\" column with \"Yes\" and \"No\"\n"]},{"cell_type":"markdown","metadata":{"id":"EJ_wjCkqNEgb"},"source":["### Exercise 2: Create a new column using an expression\n","\n","Create a new column, `Aspect`, that contains the aspect ratio (width / height) of a photograph using the values in the `Width (cm)` and `Height (cm)` columns."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PUtqxF6QNEgb","executionInfo":{"status":"aborted","timestamp":1740622653804,"user_tz":300,"elapsed":2820,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"outputs":[],"source":["# Create a new column named \"Aspect\" that contains the aspect ratio of a\n","# photograph based on the values in columns \"Width (cm)\" and \"Height (cm)\"\n"]},{"cell_type":"markdown","metadata":{"id":"1UMbTBp6NEgb"},"source":["### Exercise 3: Create a new column using apply\n","\n","Use the values in the column `BeginDate` to create a new column, `CenturyBorn`, in the photos DataFrame that indicates the century in which an artist was born using a function that returns:\n","- `18th` if the artist was born between 1700-1799,\n","- `19th` if the artist was born between 1800-1899,\n","- `20th` if the artist was born between 1900-1999,\n","- `21st` if the artist was born between 2000-present, and\n","- `unknown` otherwise.\n","\n","The `BeginDate` column contains the year in which an artist was born. Unknown artist birth years are identified with the value `0`. The function `century_born()` has been provided for you to use with the apply method, but you can create your own for extra practice."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7sG79NvdNEgb","executionInfo":{"status":"aborted","timestamp":1740622653838,"user_tz":300,"elapsed":2854,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"outputs":[],"source":["# Return the century in which an artist was born given their birth year\n","def century_born(year):\n","    if year > 1999:\n","        return '21st'\n","    elif year > 1899:\n","        return '20th'\n","    elif year > 1799:\n","        return '19th'\n","    elif year > 1699:\n","        return '18th'\n","    return 'unknown'\n","\n","# Create a new column named \"CenturyBorn\" that contains the century in which an\n","# artist was born using data from the column \"BeginDate\" and the function\n","# century_born\n"]},{"cell_type":"markdown","metadata":{"id":"JJlCeLcBNEgb"},"source":["### Exercise 4: Remove missing values\n","\n","We are only interested in artworks that have a defined width and height. Use the column `Aspect` to remove any rows from the dataset that do not have a defined aspect ratio (in other words, values that are `NaN`)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5zbyrbRCNEgb","executionInfo":{"status":"aborted","timestamp":1740622653841,"user_tz":300,"elapsed":2856,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"outputs":[],"source":["# Remove rows from the dataset that have an \"NaN\" value in the \"Aspect\" column\n"]},{"cell_type":"markdown","metadata":{"id":"XeiWSQv-NEgb"},"source":["### Exercise 5: Use a string method to normalize data\n","\n","Normalize the values in the column `Gender` by applying the string method `title()` to convert all strings to title case (for example, convert `male` to `Male` and `female` to `Female`). Print out the unique values of this column after performing the operation to ensure only three values are present (`Male`, `Female`, and `nan`)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nw9WCWhLNEgb","executionInfo":{"status":"aborted","timestamp":1740622653844,"user_tz":300,"elapsed":2859,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"outputs":[],"source":["# Normalize the string values in the \"Gender\" column to title case (each word\n","# beginning with a capital letter)\n"]},{"cell_type":"markdown","metadata":{"id":"jF4DxXL4NEgb"},"source":["### Exercise 6: Convert string data to Datetime\n","\n","Convert the string data contained in the column `DateAcquired` to Datetime data type. Reassign the new Datetime values to the existing `DateAcquired` column and then use this column to filter the DataFrame for items acquired in or after the year 2020."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iQh7vhGkNEgb","executionInfo":{"status":"aborted","timestamp":1740622653845,"user_tz":300,"elapsed":2859,"user":{"displayName":"Ryan Hinshaw","userId":"06218530341388954247"}}},"outputs":[],"source":["# Convert the string data in the column \"DateAcquired\" to a Datetime data type\n","\n","\n","# Use the updated column to filter the DataFrame to photos acquired in or after\n","# the year 2020\n"]},{"cell_type":"markdown","source":["# Learning resources\n","\n","- [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/index.html) - a free, online version of Jake VanderPlas' introduction to data science with Python, includes a chapter on data manipulation with pandas.\n","- [Python Programming for Data Science](https://www.tomasbeuzen.com/python-programming-for-data-science/README.html) - a website providing a great overview of conducting data science with Python including pandas.\n","- [Real Python](https://realpython.com/) contains a lot of different tutorials at different levels\n","- [LinkedIn Learning](https://www.lynda.com/Python-training-tutorials/415-0.html) is free with NC State accounts and contains several video series for learning Python\n","- [Dataquest](https://www.dataquest.io/) is a free then paid series of courses with an emphasis on data science\n","\n","### Finding help with pandas\n","\n","The [Pandas website](https://pandas.pydata.org/) and [online documentation](http://pandas.pydata.org/pandas-docs/stable/) are useful resources, and of course the indispensible [Stack Overflow has a \"pandas\" tag](https://stackoverflow.com/questions/tagged/pandas).  There is also a (much younger, much smaller) [sister site dedicated to Data Science questions that has a \"pandas\" tag](https://datascience.stackexchange.com/questions/tagged/pandas) too."],"metadata":{"id":"Gr3AxzlBs8ZK"}},{"cell_type":"markdown","source":["# Credits\n","\n","This workshop was created by Aditi Mallavarapu, Claire Cahoon and Walt Gurley, adapted from previous workshop materials by Scott Bailey and Simon Wiles, of Stanford Libraries."],"metadata":{"id":"g329QckbtRVM"}}]}